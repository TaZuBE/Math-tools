import{c as t}from"./computeExpr-D_yysp4G.js";import{g as E,_ as s,o as l,a as i,k as B,v,f as a,t as o,c as e,p as D,e as C}from"./index-hvPUznol.js";const r=E({name:"random",data(){return{expression:""}},computed:{result(){const u=t(this.expression);return u!==null?(console.log(u),u):"..."}},mounted(){}}),n=u=>(D("data-v-669a02d6"),u=u(),C(),u),A={class:"base"},c=n(()=>a("h1",{class:"first-title"},"随机数生成器",-1)),h={class:"result"},x=e('<div class="tips" data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 取随机数 · <h1 class="title strong" data-v-669a02d6>数组</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>如果要取得随机数是某些指定中的一个，那么就可以使用数组实现。例如 [4.8, 9.2, 2] 返回这三个数中随机一个。</li><li class="strong" data-v-669a02d6>注意:    元素（每个数字）之间要用逗号隔开</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 取随机数 · <h1 class="title strong" data-v-669a02d6>范围</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>可以把数组的元素换成 min~max 的形式，表示整数min到整数max的整数集合。也可以换成 !min~max或!val 的形式，表示移除整数min到整数max的整数集合或移除val。</li><li class="strong" data-v-669a02d6>注意:    min≤max    min&amp;max是整数</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 修饰结果 · <h1 class="title strong" data-v-669a02d6>计算</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>如果想对取得的随机数进行进一步的操作，例如利用 [0~10] 获得0~20所有偶数中随机一个，那就得手动计算了。这里支持 + - * / % 运算符和 floor ceil round 函数，使用函数时，是&quot;函数名(参数)&quot;的格式，如果没有参数或有多个参数，括号也不能省去。</li><li class="strong" data-v-669a02d6>注意:    计算机无法精确的存储小数，尽量避免使用小数</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 修饰结果 · <h1 class="title strong" data-v-669a02d6>运算符 %</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>%运算符是计算余数的。</li><li data-v-669a02d6>例如：3%2的值就是3÷2的余数。无论被除数和除数都是什么数，商一定是整数，这对于%的计算结果很重要。</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 修饰结果 · <h1 class="title strong" data-v-669a02d6>函数 floor</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>floor函数是对于一个实数返回小于等于它最大的整数的函数，也可以说是返回省略小数部分的整数。</li><li data-v-669a02d6>例如：floor(8.2)返回8，省略了小数部分0.2；floor(-3.2)返回-4，因为-4是-3.2小于而且最大的整数。</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 修饰结果 · <h1 class="title strong" data-v-669a02d6>函数 ceil</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>ceil函数是对于一个实数返回大于等于它最小的整数的函数，也可以说是返回省略小数部分并且加一的整数。</li><li data-v-669a02d6>例如：ceil(8.2)返回9，省略了小数部分0.2并且+1；ceil(-3.2)返回-3，因为-3是-3.2大于而且最小的整数。</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 修饰结果 · <h1 class="title strong" data-v-669a02d6>函数 round</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>round函数是对于一个实数返回它四舍五入后的整数。</li><li data-v-669a02d6>例如：round(8.2)返回8；round(-3.2)返回-3。</li></ul></div><hr data-v-669a02d6><div class="tip" data-v-669a02d6><h1 class="title" data-v-669a02d6>表达式 · 更多函数 · <h1 class="title strong" data-v-669a02d6>random函数</h1></h1><ul data-v-669a02d6><li data-v-669a02d6>如果你喜欢，你可以使用random函数来获取你想要的随机数。random函数不需要参数，它会返回0~1间一个随机的数（包括0，不包括1）。</li><li data-v-669a02d6> random() = 0.348274<br data-v-669a02d6> random() = 0.6100862<br data-v-669a02d6> random() = 0.114514<br data-v-669a02d6> random() = 0.4131025<br data-v-669a02d6></li><li class="strong" data-v-669a02d6>注意:    不返回1</li></ul></div><div class="nothing" data-v-669a02d6></div></div>',1);function p(u,F,m,f,g,_){return l(),i("div",A,[c,B(a("input",{class:"expression","onUpdate:modelValue":F[0]||(F[0]=d=>u.expression=d),placeholder:"请输入表达式"},null,512),[[v,u.expression]]),a("div",h,o(u.result),1),x])}const I=s(r,[["render",p],["__scopeId","data-v-669a02d6"]]);export{I as default};
